/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
DiauproPluginAudioProcessor::DiauproPluginAudioProcessor()
{
    monitor.startMonitoring();
    diauproVCOProcessor.setMonitor(&monitor);
    //diauproVCAProcessor.setMonitor(&monitor);
    
}

DiauproPluginAudioProcessor::~DiauproPluginAudioProcessor()
{
    monitor.stop();
}

//==============================================================================
const String DiauproPluginAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int DiauproPluginAudioProcessor::getNumParameters()
{
    return 0;
}

float DiauproPluginAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void DiauproPluginAudioProcessor::setParameter (int index, float newValue)
{
}

const String DiauproPluginAudioProcessor::getParameterName (int index)
{
    return String();
}

const String DiauproPluginAudioProcessor::getParameterText (int index)
{
    return String();
}

const String DiauproPluginAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String DiauproPluginAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool DiauproPluginAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool DiauproPluginAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool DiauproPluginAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool DiauproPluginAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool DiauproPluginAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double DiauproPluginAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int DiauproPluginAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int DiauproPluginAudioProcessor::getCurrentProgram()
{
    return 0;
}

void DiauproPluginAudioProcessor::setCurrentProgram (int index)
{
}

const String DiauproPluginAudioProcessor::getProgramName (int index)
{
    return String();
}

void DiauproPluginAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void DiauproPluginAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{


    diauproVCOProcessor.prepareToPlay(sampleRate, samplesPerBlock);
    //diauproVCAProcessor.prepareToPlay(sampleRate, samplesPerBlock);
}

void DiauproPluginAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void DiauproPluginAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    buffer.clear();
    diauproVCOProcessor.processBlock(buffer, midiMessages);
    //diauproVCAProcessor.processBlock(buffer, midiMessages);
    
    processTime = diauproVCOProcessor.getProcessTime();
    triggerAsyncUpdate ();
}

//==============================================================================
bool DiauproPluginAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* DiauproPluginAudioProcessor::createEditor()
{
    this->editor = new DiauproPluginAudioProcessorEditor (*this);
    return this->editor;
}

//==============================================================================
void DiauproPluginAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void DiauproPluginAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

void DiauproPluginAudioProcessor::handleAsyncUpdate ()
{

    if (editor != nullptr && ((DiauproPluginAudioProcessorEditor *)editor)->isReady()) {

        editor->repaint ();
    }
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new DiauproPluginAudioProcessor();
}


